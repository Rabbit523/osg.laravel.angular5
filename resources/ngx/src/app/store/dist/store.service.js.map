{"version":3,"sources":["store.service.ts"],"names":[],"mappings":"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","file":"store.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\n\nexport const DBKEYS = {THEME: 'tYp95ymECHOESt', TOKEN: 'tYp95ymECHOESk'};\n\nexport interface IFilter {\n  dateMode: string;\n  startDate: string;\n  endDate: string;\n}\n\nexport interface AppState {\n  cur_calendar_id: number;\n  calendar_workout_logs: any;\n  required_preinterview: boolean;\n  required_postinterview: boolean;\n  graph_data: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class StoreService {\n\n  private localdb: Storage = window.localStorage;\n\n  // Initial state in BehaviorSubject's constructor\n  private readonly subject: BehaviorSubject<AppState>;\n\n  // Exposed observable$ store stream\n  readonly state$: Observable<AppState>;\n\n  // Getter of the last store value emitted\n  private get store(): AppState {\n    return this.subject.getValue();\n  }\n\n  // Push new state into the observable\n  private set store(val: AppState) {\n    this.subject.next(val);\n  }\n\n  private calendarFlagSubject = new Subject<any>();\n  calendarFlagObservable$ = this.calendarFlagSubject.asObservable();\n\n  public setCalendarFlag() {\n    this.calendarFlagSubject.next();\n  }\n\n  private graphDataFlagSubject = new Subject<any>();\n  graphDataFlagObservable$ = this.graphDataFlagSubject.asObservable();\n\n  public setGraphDataFlag() {\n    this.graphDataFlagSubject.next();\n  }\n\n  constructor() {\n\n    // Initialize the app state\n    this.subject = new BehaviorSubject<AppState>({\n      cur_calendar_id: null,\n      calendar_workout_logs: null,\n      required_preinterview: false,\n      required_postinterview: false,\n      graph_data: null,\n    });\n    this.state$ = this.subject.asObservable();\n  }\n\n  public setCalendarWorkoutLogs(calendar_workout_logs) {\n    console.log(\">>> set calendar workout logs: \", calendar_workout_logs);\n    this.store = { ...this.store, calendar_workout_logs: calendar_workout_logs }\n  }\n  public getCalendarWorkoutLogs() {\n    return this.store.calendar_workout_logs\n  }\n\n  public setRequiredPreinterview(required_preinterview) {\n    this.store = { ...this.store, required_preinterview: required_preinterview }\n  }\n  public getRequiredPreinterview() {\n    return this.store.required_preinterview;\n  }\n\n  public setRequiredPostinterview(required_postinterview) {\n    this.store = { ...this.store, required_postinterview: required_postinterview }\n  }\n  public getRequiredPostinterview() {\n    return this.store.required_postinterview;\n  }\n\n  public setCurCalendarId(id) {\n    this.store = { ...this.store, cur_calendar_id: id}\n  }\n  public getCurCalendarId() {\n    return this.store.cur_calendar_id;\n  }\n\n  public setGraphData(data) {\n    this.store = { ...this.store, graph_data: data}\n  }\n  public getGraphData() {\n    return this.store.graph_data;\n  }\n}\n"]}